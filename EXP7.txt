Q1. Perform following queries on bank database:

1. Find the name of the branch with the smallest number of assets.
SQL> select branch_name from branch where asset = (select min(asset) from branch);

2. Find the names of all branches that have assets greater than atleast one branch located in Brooklyn
SQL> select b1.branch_name from branch b1 where b1.asset >ANY (select b2.asset from branch b2 where b2.branch_city='Brooklyn');

3. Find all customers who have both an account and a loan at the bank
SQL> select distinct d.cust_name from depositor d left outer join account a on d.acc_no=a.acc_no left outer join loan l on a.branch_name=l.branch_name where l.loan_no is not null and a.acc_no is not null;

4. Find all customers who do have a loan at the bank, but do not have an account at the bank
SQL> select distinct d.cust_name from depositor d left outer join account a on d.acc_no=a.acc_no left outer join loan l on a.branch_name=l.branch_name where a.acc_no is not null;

5. Find the details of the largest loan at each branch, including the branch name and the amount of the loan
SQL> select branch_name,max(amount) from loan group by branch_name;

6. Find all customers who have both an account and a loan at the bank
SQL> select distinct d.cust_name from depositor d left outer join account a on d.acc_no=a.acc_no left outer join loan l on a.branch_name=l.branch_name where l.loan_no is not null and a.acc_no is not null;

7. Find customers with an account but not a loan
SQL> select d.cust_name from depositor d left outer join account a on d.acc_no = a.acc_no 
     left outer join loan l on a.branch_name = l.branch_name 
     where l.loan_no is null;

8. Find the names of all branches that have assets greater than those of at least one branch located in Brooklyn
SQL> select b1.branch_name from branch b1 where b1.asset >ANY (select b2.asset from branch b2 where b2.branch_city='Brooklyn');

9. Find the names of all branches that have an asset value greater than that of each branch in Brooklyn
SQL>  select b1.branch_name from branch b1 where b1.asset >All (select b2.asset from branch b2 where b2.branch_city='Brooklyn');

10. Create view to be called all-customer contain all the customers of bank
SQL> create view all_customer as select cust_name from customer;

11. Find the largest total account balance of any branch
SQL>SELECT branch_id, SUM(balance) AS total_balance
FROM accounts
GROUP BY branch_id
ORDER BY total_balance DESC
LIMIT 1;




Q2. Consider the following schema:
Sailors (sid, sname, rating, age)
Boats (bid, bname, color)
Reserves (sid, bid, day(date))
Write SQL statements for the following query.
1. Find all information of sailors who have reserved boat number 101.
SELECT *
FROM Sailors
WHERE sid IN (
    SELECT sid
    FROM Reserves
    WHERE bid = 101
);

2. Find the name of boat reserved by Bob.
SELECT B.bname
FROM Boats B
JOIN Reserves R ON B.bid = R.bid
JOIN Sailors S ON R.sid = S.sid
WHERE S.sname = 'Bob';

3. Find the names of sailors who have reserved a red boat, and list in the order of age.
SELECT DISTINCT S.sname
FROM Sailors S
JOIN Reserves R ON S.sid = R.sid
JOIN Boats B ON R.bid = B.bid
WHERE B.color = 'red'
ORDER BY S.age;

4. Find the names of sailors who have reserved at least one boat.
SELECT DISTINCT S.sname
FROM Sailors S
JOIN Reserves R ON S.sid = R.sid;

5. Find the ids and names of sailors who have reserved two different boats on the same day.
SELECT R1.sid, S.sname
FROM Reserves R1
JOIN Reserves R2 ON R1.sid = R2.sid AND R1.bid <> R2.bid AND R1.day = R2.day
JOIN Sailors S ON R1.sid = S.sid
GROUP BY R1.sid, S.sname;

6. Find the ids of sailors who have reserved a red boat or a green boat.
SELECT DISTINCT S.sid
FROM Sailors S
JOIN Reserves R ON S.sid = R.sid
JOIN Boats B ON R.bid = B.bid
WHERE B.color IN ('red', 'green');

7. Find the name and the age of the youngest sailor.
SELECT sname, age
FROM Sailors
WHERE age = (SELECT MIN(age) FROM Sailors);

8. Count the number of different sailor names.
SELECT COUNT(DISTINCT sname) AS different_sailor_names
FROM Sailors;

9. Find the average age of sailors for each rating level.
SELECT rating, AVG(age) AS average_age
FROM Sailors
GROUP BY rating;

10. Find the average age of sailors for each rating level that has at least two sailors.
SELECT rating, AVG(age) AS average_age
FROM Sailors
GROUP BY rating
HAVING COUNT(*) >= 2;



